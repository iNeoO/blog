/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthUserHomeRouteImport } from './routes/_auth/_user/home'
import { Route as AuthAdminUsersIndexRouteImport } from './routes/_auth/admin/users/index'
import { Route as AuthAdminUsersNewRouteImport } from './routes/_auth/admin/users/new'
import { Route as AuthAdminUsersUserIdRouteImport } from './routes/_auth/admin/users/$userId'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthUserHomeRoute = AuthUserHomeRouteImport.update({
  id: '/_user/home',
  path: '/home',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthAdminUsersIndexRoute = AuthAdminUsersIndexRouteImport.update({
  id: '/admin/users/',
  path: '/admin/users/',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthAdminUsersNewRoute = AuthAdminUsersNewRouteImport.update({
  id: '/admin/users/new',
  path: '/admin/users/new',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthAdminUsersUserIdRoute = AuthAdminUsersUserIdRouteImport.update({
  id: '/admin/users/$userId',
  path: '/admin/users/$userId',
  getParentRoute: () => AuthRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/home': typeof AuthUserHomeRoute
  '/admin/users/$userId': typeof AuthAdminUsersUserIdRoute
  '/admin/users/new': typeof AuthAdminUsersNewRoute
  '/admin/users': typeof AuthAdminUsersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/home': typeof AuthUserHomeRoute
  '/admin/users/$userId': typeof AuthAdminUsersUserIdRoute
  '/admin/users/new': typeof AuthAdminUsersNewRoute
  '/admin/users': typeof AuthAdminUsersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_auth/_user/home': typeof AuthUserHomeRoute
  '/_auth/admin/users/$userId': typeof AuthAdminUsersUserIdRoute
  '/_auth/admin/users/new': typeof AuthAdminUsersNewRoute
  '/_auth/admin/users/': typeof AuthAdminUsersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/home'
    | '/admin/users/$userId'
    | '/admin/users/new'
    | '/admin/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/home'
    | '/admin/users/$userId'
    | '/admin/users/new'
    | '/admin/users'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/login'
    | '/register'
    | '/_auth/_user/home'
    | '/_auth/admin/users/$userId'
    | '/_auth/admin/users/new'
    | '/_auth/admin/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/_user/home': {
      id: '/_auth/_user/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AuthUserHomeRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/admin/users/': {
      id: '/_auth/admin/users/'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AuthAdminUsersIndexRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/admin/users/new': {
      id: '/_auth/admin/users/new'
      path: '/admin/users/new'
      fullPath: '/admin/users/new'
      preLoaderRoute: typeof AuthAdminUsersNewRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/admin/users/$userId': {
      id: '/_auth/admin/users/$userId'
      path: '/admin/users/$userId'
      fullPath: '/admin/users/$userId'
      preLoaderRoute: typeof AuthAdminUsersUserIdRouteImport
      parentRoute: typeof AuthRouteRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthUserHomeRoute: typeof AuthUserHomeRoute
  AuthAdminUsersUserIdRoute: typeof AuthAdminUsersUserIdRoute
  AuthAdminUsersNewRoute: typeof AuthAdminUsersNewRoute
  AuthAdminUsersIndexRoute: typeof AuthAdminUsersIndexRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthUserHomeRoute: AuthUserHomeRoute,
  AuthAdminUsersUserIdRoute: AuthAdminUsersUserIdRoute,
  AuthAdminUsersNewRoute: AuthAdminUsersNewRoute,
  AuthAdminUsersIndexRoute: AuthAdminUsersIndexRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
